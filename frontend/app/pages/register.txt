// src/components/ERPRegisterProgressive.tsx
import { useState, useEffect } from 'react';
import { 
  PiEyeLight, 
  PiEyeSlash, 
  PiArrowRight, 
  PiArrowLeft,
  PiUserCircle, 
  PiLock, 
  PiShieldCheck, 
  PiEnvelope, 
  PiBuilding, 
  PiPhone, 
  PiIdentificationCard,
  PiGlobe,
  PiUsers,
  PiChartBar,
  PiCheckCircle
} from 'react-icons/pi';
import { motion, AnimatePresence } from 'framer-motion';
import { useNavigate, Link } from 'react-router-dom';

// Types
interface FormData {
  // Step 1: Account Basics
  email: string;
  password: string;
  confirmPassword: string;
  termsAccepted: boolean;
  
  // Step 2: Personal Information
  firstName: string;
  lastName: string;
  phone: string;
  
  // Step 3: Organization Details
  companyName: string;
  industry: string;
  employeeCount: string;
  country: string;
  timezone: string;
  language: string;
  
  // Step 4: Role & Preferences
  role: string;
  department: string;
  marketingConsent: boolean;
  
  // Verification (hidden fields)
  businessRegNumber?: string;
  taxId?: string;
}

interface FormErrors {
  email: string;
  password: string;
  confirmPassword: string;
  firstName: string;
  lastName: string;
  phone: string;
  companyName: string;
  [key: string]: string; // Index signature
}

// Constants
const INDUSTRIES = [
  'Retail',
  'Education',
  'Manufacturing',
  'Healthcare',
  'Hospitality',
  'Construction',
  'Finance',
  'Professional Services',
  'Non-profit',
  'Other'
];

const EMPLOYEE_COUNTS = [
  '1-10',
  '11-50',
  '51-200',
  '201-500',
  '501-1000',
  '1000+'
];

const COUNTRIES = [
  'United States',
  'Canada',
  'United Kingdom',
  'Germany',
  'France',
  'Japan',
  'Australia',
  'Other'
];

const TIMEZONES = [
  'GMT',
  'EST',
  'PST',
  'CET',
  'IST',
  'Other'
];

const LANGUAGES = [
  'English',
  'Spanish',
  'French',
  'German',
  'Japanese',
  'Chinese',
  'Other'
];

const ROLES = [
  'Owner/Founder',
  'CEO/Executive',
  'Administrator',
  'Finance/Accounting',
  'HR Manager',
  'Operations',
  'IT Manager',
  'Other'
];

export default function ERPRegisterProgressive() {
  const [step, setStep] = useState<number>(1);
  const [showPassword, setShowPassword] = useState<boolean>(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState<boolean>(false);
  const [formData, setFormData] = useState<FormData>({
    email: '',
    password: '',
    confirmPassword: '',
    termsAccepted: false,
    firstName: '',
    lastName: '',
    phone: '',
    companyName: '',
    industry: '',
    employeeCount: '',
    country: '',
    timezone: '',
    language: 'English',
    role: '',
    department: '',
    marketingConsent: false
  });
  const [errors, setErrors] = useState<FormErrors>({
    email: '',
    password: '',
    confirmPassword: '',
    firstName: '',
    lastName: '',
    phone: '',
    companyName: ''
  });
  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);
  const [registrationSuccess, setRegistrationSuccess] = useState<boolean>(false);
  const navigate = useNavigate();

  // Background particles effect (same as login)
  const [particles, setParticles] = useState<Array<{id: number, x: number, y: number, size: number, speed: number}>>([]);
  useEffect(() => {
    const newParticles = Array.from({ length: 30 }).map((_, i) => ({
      id: i,
      x: Math.random() * 100,
      y: Math.random() * 100,
      size: Math.random() * 5 + 2,
      speed: Math.random() * 0.5 + 0.2
    }));
    setParticles(newParticles);

    const interval = setInterval(() => {
      setParticles(prev => prev.map(p => ({
        ...p,
        y: (p.y + p.speed) % 100,
        x: (p.x + p.speed * 0.3) % 100
      })));
    }, 50);

    return () => clearInterval(interval);
  }, []);

  // Handlers
  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>): void => {
    const { name, value, type } = e.target as HTMLInputElement;
    const checked = type === 'checkbox' ? (e.target as HTMLInputElement).checked : undefined;
    
    setFormData({
      ...formData,
      [name]: type === 'checkbox' ? checked : value
    });

    // Clear error when user starts typing
    if (errors[name as keyof FormErrors]) {
      setErrors({
        ...errors,
        [name]: ''
      });
    }
  };

  const validateStep = (stepNumber: number): boolean => {
    let valid = true;
    const newErrors: FormErrors = { ...errors };

    if (stepNumber === 1) {
      if (!formData.email.trim()) {
        newErrors.email = 'Email is required';
        valid = false;
      } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
        newErrors.email = 'Please enter a valid email';
        valid = false;
      }

      if (!formData.password) {
        newErrors.password = 'Password is required';
        valid = false;
      } else if (formData.password.length < 8) {
        newErrors.password = 'Password must be at least 8 characters';
        valid = false;
      }

      if (formData.password !== formData.confirmPassword) {
        newErrors.confirmPassword = 'Passwords must match';
        valid = false;
      }

      if (!formData.termsAccepted) {
        // Handle terms error differently since it's a checkbox
        valid = false;
      }
    }

    if (stepNumber === 2) {
      if (!formData.firstName.trim()) {
        newErrors.firstName = 'First name is required';
        valid = false;
      }

      if (!formData.lastName.trim()) {
        newErrors.lastName = 'Last name is required';
        valid = false;
      }

      if (!formData.phone.trim()) {
        newErrors.phone = 'Phone number is required';
        valid = false;
      }
    }

    if (stepNumber === 3) {
      if (!formData.companyName.trim()) {
        newErrors.companyName = 'Company name is required';
        valid = false;
      }
    }

    setErrors(newErrors);
    return valid;
  };

  const nextStep = (): void => {
    if (validateStep(step)) {
      setStep(step + 1);
    }
  };

  const prevStep = (): void => {
    setStep(step - 1);
  };

  const handleSubmit = async (e: React.FormEvent): Promise<void> => {
    e.preventDefault();
    
    if (!validateStep(4)) return;
    
    setIsSubmitting(true);

    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      setRegistrationSuccess(true);
      
      // Redirect to dashboard after 3 seconds
      setTimeout(() => {
        navigate('/onboarding');
      }, 3000);
    } catch (error) {
      setErrors({
        ...errors,
        email: 'Registration failed. Please try again.'
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  // Step components
  const Step1Account = () => (
    <>
      <h2 className="text-xl font-semibold text-white mb-4">Create Your Account</h2>
      
      {/* Email */}
      <div className="mb-4">
        <label htmlFor="email" className="block text-sm font-medium text-blue-100 mb-1">
          Email Address
        </label>
        <div className="relative">
          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <PiEnvelope className="h-5 w-5 text-blue-300" />
          </div>
          <input
            type="email"
            id="email"
            name="email"
            value={formData.email}
            onChange={handleChange}
            className={`block w-full pl-10 pr-3 py-2 bg-white/10 text-white placeholder-blue-200 ${
              errors.email ? 'border-red-400 focus:ring-red-300/30' : 'border-blue-300/30 focus:ring-blue-300/30'
            } rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:border-blue-400 transition backdrop-blur-sm`}
            placeholder="your@business.com"
          />
        </div>
        {errors.email && (
          <p className="mt-1 text-sm text-red-300 flex items-center">
            <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            {errors.email}
          </p>
        )}
      </div>

      {/* Password */}
      <div className="mb-4">
        <label htmlFor="password" className="block text-sm font-medium text-blue-100 mb-1">
          Password
        </label>
        <div className="relative">
          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <PiLock className="h-5 w-5 text-blue-300" />
          </div>
          <input
            type={showPassword ? "text" : "password"}
            id="password"
            name="password"
            value={formData.password}
            onChange={handleChange}
            className={`block w-full pl-10 pr-10 py-2 bg-white/10 text-white placeholder-blue-200 ${
              errors.password ? 'border-red-400 focus:ring-red-300/30' : 'border-blue-300/30 focus:ring-blue-300/30'
            } rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:border-blue-400 transition backdrop-blur-sm`}
            placeholder="••••••••"
          />
          <button
            type="button"
            className="absolute inset-y-0 right-0 pr-3 flex items-center"
            onClick={() => setShowPassword(!showPassword)}
            aria-label={showPassword ? "Hide password" : "Show password"}
          >
            {showPassword ? (
              <PiEyeSlash className="h-5 w-5 text-blue-300 hover:text-blue-100" />
            ) : (
              <PiEyeLight className="h-5 w-5 text-blue-300 hover:text-blue-100" />
            )}
          </button>
        </div>
        {errors.password && (
          <p className="mt-1 text-sm text-red-300 flex items-center">
            <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            {errors.password}
          </p>
        )}
      </div>

      {/* Confirm Password */}
      <div className="mb-4">
        <label htmlFor="confirmPassword" className="block text-sm font-medium text-blue-100 mb-1">
          Confirm Password
        </label>
        <div className="relative">
          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <PiLock className="h-5 w-5 text-blue-300" />
          </div>
          <input
            type={showConfirmPassword ? "text" : "password"}
            id="confirmPassword"
            name="confirmPassword"
            value={formData.confirmPassword}
            onChange={handleChange}
            className={`block w-full pl-10 pr-10 py-2 bg-white/10 text-white placeholder-blue-200 ${
              errors.confirmPassword ? 'border-red-400 focus:ring-red-300/30' : 'border-blue-300/30 focus:ring-blue-300/30'
            } rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:border-blue-400 transition backdrop-blur-sm`}
            placeholder="••••••••"
          />
          <button
            type="button"
            className="absolute inset-y-0 right-0 pr-3 flex items-center"
            onClick={() => setShowConfirmPassword(!showConfirmPassword)}
            aria-label={showConfirmPassword ? "Hide password" : "Show password"}
          >
            {showConfirmPassword ? (
              <PiEyeSlash className="h-5 w-5 text-blue-300 hover:text-blue-100" />
            ) : (
              <PiEyeLight className="h-5 w-5 text-blue-300 hover:text-blue-100" />
            )}
          </button>
        </div>
        {errors.confirmPassword && (
          <p className="mt-1 text-sm text-red-300 flex items-center">
            <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            {errors.confirmPassword}
          </p>
        )}
      </div>

      {/* Terms */}
      <div className="flex items-start mb-6">
        <div className="flex items-center h-5">
          <input
            id="termsAccepted"
            name="termsAccepted"
            type="checkbox"
            checked={formData.termsAccepted}
            onChange={handleChange}
            className="h-4 w-4 text-blue-400 focus:ring-blue-300 border-blue-300/50 rounded bg-white/10"
          />
        </div>
        <div className="ml-3 text-sm">
          <label htmlFor="termsAccepted" className="text-blue-100">
            I agree to the{' '}
            <a href="#" className="text-blue-300 hover:text-blue-100">
              Terms of Service
            </a>{' '}
            and{' '}
            <a href="#" className="text-blue-300 hover:text-blue-100">
              Privacy Policy
            </a>
          </label>
          {!formData.termsAccepted && errors.email && (
            <p className="mt-1 text-sm text-red-300">
              You must accept the terms to continue
            </p>
          )}
        </div>
      </div>
    </>
  );

  const Step2Personal = () => (
    <>
      <h2 className="text-xl font-semibold text-white mb-4">Personal Information</h2>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {/* First Name */}
        <div>
          <label htmlFor="firstName" className="block text-sm font-medium text-blue-100 mb-1">
            First Name
          </label>
          <div className="relative">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <PiUserCircle className="h-5 w-5 text-blue-300" />
            </div>
            <input
              type="text"
              id="firstName"
              name="firstName"
              value={formData.firstName}
              onChange={handleChange}
              className={`block w-full pl-10 pr-3 py-2 bg-white/10 text-white placeholder-blue-200 ${
                errors.firstName ? 'border-red-400 focus:ring-red-300/30' : 'border-blue-300/30 focus:ring-blue-300/30'
              } rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:border-blue-400 transition backdrop-blur-sm`}
              placeholder="John"
            />
          </div>
          {errors.firstName && (
            <p className="mt-1 text-sm text-red-300 flex items-center">
              <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
              {errors.firstName}
            </p>
          )}
        </div>

        {/* Last Name */}
        <div>
          <label htmlFor="lastName" className="block text-sm font-medium text-blue-100 mb-1">
            Last Name
          </label>
          <div className="relative">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <PiUserCircle className="h-5 w-5 text-blue-300" />
            </div>
            <input
              type="text"
              id="lastName"
              name="lastName"
              value={formData.lastName}
              onChange={handleChange}
              className={`block w-full pl-10 pr-3 py-2 bg-white/10 text-white placeholder-blue-200 ${
                errors.lastName ? 'border-red-400 focus:ring-red-300/30' : 'border-blue-300/30 focus:ring-blue-300/30'
              } rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:border-blue-400 transition backdrop-blur-sm`}
              placeholder="Doe"
            />
          </div>
          {errors.lastName && (
            <p className="mt-1 text-sm text-red-300 flex items-center">
              <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
              {errors.lastName}
            </p>
          )}
        </div>
      </div>

      {/* Phone */}
      <div className="mt-4">
        <label htmlFor="phone" className="block text-sm font-medium text-blue-100 mb-1">
          Phone Number
        </label>
        <div className="relative">
          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <PiPhone className="h-5 w-5 text-blue-300" />
          </div>
          <input
            type="tel"
            id="phone"
            name="phone"
            value={formData.phone}
            onChange={handleChange}
            className={`block w-full pl-10 pr-3 py-2 bg-white/10 text-white placeholder-blue-200 ${
              errors.phone ? 'border-red-400 focus:ring-red-300/30' : 'border-blue-300/30 focus:ring-blue-300/30'
            } rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:border-blue-400 transition backdrop-blur-sm`}
            placeholder="+1 (555) 123-4567"
          />
        </div>
        {errors.phone && (
          <p className="mt-1 text-sm text-red-300 flex items-center">
            <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            {errors.phone}
          </p>
        )}
      </div>
    </>
  );

  const Step3Organization = () => (
    <>
      <h2 className="text-xl font-semibold text-white mb-4">Organization Details</h2>
      
      {/* Company Name */}
      <div className="mb-4">
        <label htmlFor="companyName" className="block text-sm font-medium text-blue-100 mb-1">
          Company/Organization Name
        </label>
        <div className="relative">
          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <PiBuilding className="h-5 w-5 text-blue-300" />
          </div>
          <input
            type="text"
            id="companyName"
            name="companyName"
            value={formData.companyName}
            onChange={handleChange}
            className={`block w-full pl-10 pr-3 py-2 bg-white/10 text-white placeholder-blue-200 ${
              errors.companyName ? 'border-red-400 focus:ring-red-300/30' : 'border-blue-300/30 focus:ring-blue-300/30'
            } rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:border-blue-400 transition backdrop-blur-sm`}
            placeholder="Acme Inc."
          />
        </div>
        {errors.companyName && (
          <p className="mt-1 text-sm text-red-300 flex items-center">
            <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            {errors.companyName}
          </p>
        )}
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {/* Industry */}
        <div>
          <label htmlFor="industry" className="block text-sm font-medium text-blue-100 mb-1">
            Industry
          </label>
          <div className="relative">
            <select
              id="industry"
              name="industry"
              value={formData.industry}
              onChange={handleChange}
              className="block w-full pl-3 pr-10 py-2 bg-white/10 text-white border-blue-300/30 focus:ring-blue-300/30 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:border-blue-400 transition backdrop-blur-sm"
            >
              <option value="">Select your industry</option>
              {INDUSTRIES.map(industry => (
                <option key={industry} value={industry}>{industry}</option>
              ))}
            </select>
          </div>
        </div>

        {/* Employee Count */}
        <div>
          <label htmlFor="employeeCount" className="block text-sm font-medium text-blue-100 mb-1">
            Employee Count
          </label>
          <div className="relative">
            <select
              id="employeeCount"
              name="employeeCount"
              value={formData.employeeCount}
              onChange={handleChange}
              className="block w-full pl-3 pr-10 py-2 bg-white/10 text-white border-blue-300/30 focus:ring-blue-300/30 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:border-blue-400 transition backdrop-blur-sm"
            >
              <option value="">Select employee count</option>
              {EMPLOYEE_COUNTS.map(count => (
                <option key={count} value={count}>{count}</option>
              ))}
            </select>
          </div>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-4">
        {/* Country */}
        <div>
          <label htmlFor="country" className="block text-sm font-medium text-blue-100 mb-1">
            Country
          </label>
          <div className="relative">
            <select
              id="country"
              name="country"
              value={formData.country}
              onChange={handleChange}
              className="block w-full pl-3 pr-10 py-2 bg-white/10 text-white border-blue-300/30 focus:ring-blue-300/30 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:border-blue-400 transition backdrop-blur-sm"
            >
              <option value="">Select country</option>
              {COUNTRIES.map(country => (
                <option key={country} value={country}>{country}</option>
              ))}
            </select>
          </div>
        </div>

        {/* Timezone */}
        <div>
          <label htmlFor="timezone" className="block text-sm font-medium text-blue-100 mb-1">
            Timezone
          </label>
          <div className="relative">
            <select
              id="timezone"
              name="timezone"
              value={formData.timezone}
              onChange={handleChange}
              className="block w-full pl-3 pr-10 py-2 bg-white/10 text-white border-blue-300/30 focus:ring-blue-300/30 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:border-blue-400 transition backdrop-blur-sm"
            >
              <option value="">Select timezone</option>
              {TIMEZONES.map(tz => (
                <option key={tz} value={tz}>{tz}</option>
              ))}
            </select>
          </div>
        </div>

        {/* Language */}
        <div>
          <label htmlFor="language" className="block text-sm font-medium text-blue-100 mb-1">
            Language
          </label>
          <div className="relative">
            <select
              id="language"
              name="language"
              value={formData.language}
              onChange={handleChange}
              className="block w-full pl-3 pr-10 py-2 bg-white/10 text-white border-blue-300/30 focus:ring-blue-300/30 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:border-blue-400 transition backdrop-blur-sm"
            >
              {LANGUAGES.map(lang => (
                <option key={lang} value={lang}>{lang}</option>
              ))}
            </select>
          </div>
        </div>
      </div>

      {/* Optional Fields */}
      <div className="mt-6">
        <h3 className="text-sm font-medium text-blue-200 mb-2">Additional Information (Optional)</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label htmlFor="businessRegNumber" className="block text-sm font-medium text-blue-100 mb-1">
              Business Registration Number
            </label>
            <input
              type="text"
              id="businessRegNumber"
              name="businessRegNumber"
              value={formData.businessRegNumber || ''}
              onChange={handleChange}
              className="block w-full pl-3 pr-3 py-2 bg-white/10 text-white placeholder-blue-200 border-blue-300/30 focus:ring-blue-300/30 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:border-blue-400 transition backdrop-blur-sm"
              placeholder="123456789"
            />
          </div>
          <div>
            <label htmlFor="taxId" className="block text-sm font-medium text-blue-100 mb-1">
              Tax ID/VAT Number
            </label>
            <input
              type="text"
              id="taxId"
              name="taxId"
              value={formData.taxId || ''}
              onChange={handleChange}
              className="block w-full pl-3 pr-3 py-2 bg-white/10 text-white placeholder-blue-200 border-blue-300/30 focus:ring-blue-300/30 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:border-blue-400 transition backdrop-blur-sm"
              placeholder="GB123456789"
            />
          </div>
        </div>
      </div>
    </>
  );

  const Step4Role = () => (
    <>
      <h2 className="text-xl font-semibold text-white mb-4">Your Role & Preferences</h2>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {/* Role */}
        <div>
          <label htmlFor="role" className="block text-sm font-medium text-blue-100 mb-1">
            Your Primary Role
          </label>
          <div className="relative">
            <select
              id="role"
              name="role"
              value={formData.role}
              onChange={handleChange}
              className="block w-full pl-3 pr-10 py-2 bg-white/10 text-white border-blue-300/30 focus:ring-blue-300/30 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:border-blue-400 transition backdrop-blur-sm"
            >
              <option value="">Select your role</option>
              {ROLES.map(role => (
                <option key={role} value={role}>{role}</option>
              ))}
            </select>
          </div>
        </div>

        {/* Department */}
        <div>
          <label htmlFor="department" className="block text-sm font-medium text-blue-100 mb-1">
            Department (if applicable)
          </label>
          <input
            type="text"
            id="department"
            name="department"
            value={formData.department}
            onChange={handleChange}
            className="block w-full pl-3 pr-3 py-2 bg-white/10 text-white placeholder-blue-200 border-blue-300/30 focus:ring-blue-300/30 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:border-blue-400 transition backdrop-blur-sm"
            placeholder="Finance, HR, IT, etc."
          />
        </div>
      </div>

      {/* Marketing Consent */}
      <div className="mt-6">
        <div className="flex items-start">
          <div className="flex items-center h-5">
            <input
              id="marketingConsent"
              name="marketingConsent"
              type="checkbox"
              checked={formData.marketingConsent}
              onChange={handleChange}
              className="h-4 w-4 text-blue-400 focus:ring-blue-300 border-blue-300/50 rounded bg-white/10"
            />
          </div>
          <div className="ml-3 text-sm">
            <label htmlFor="marketingConsent" className="text-blue-100">
              I'd like to receive product updates and marketing communications
            </label>
          </div>
        </div>
      </div>

      {/* Summary */}
      <div className="mt-8 p-4 bg-white/5 rounded-lg border border-white/10">
        <h3 className="text-lg font-medium text-white mb-3">Registration Summary</h3>
        <div className="space-y-2 text-sm text-blue-100">
          <p><span className="font-medium">Email:</span> {formData.email}</p>
          <p><span className="font-medium">Name:</span> {formData.firstName} {formData.lastName}</p>
          <p><span className="font-medium">Company:</span> {formData.companyName || 'Not provided'}</p>
          <p><span className="font-medium">Industry:</span> {formData.industry || 'Not specified'}</p>
          <p><span className="font-medium">Role:</span> {formData.role || 'Not specified'}</p>
        </div>
      </div>
    </>
  );

  const StepProgress = () => (
    <div className="mb-6">
      <div className="flex items-center justify-between">
        {[1, 2, 3, 4].map((stepNumber) => (
          <div key={stepNumber} className="flex flex-col items-center">
            <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
              step === stepNumber 
                ? 'bg-blue-500 text-white' 
                : step > stepNumber 
                  ? 'bg-green-500 text-white' 
                  : 'bg-white/10 text-blue-200'
            }`}>
              {step > stepNumber ? <PiCheckCircle className="w-5 h-5" /> : stepNumber}
            </div>
            <span className={`text-xs mt-1 ${
              step >= stepNumber ? 'text-white' : 'text-blue-200'
            }`}>
              {stepNumber === 1 && 'Account'}
              {stepNumber === 2 && 'Personal'}
              {stepNumber === 3 && 'Business'}
              {stepNumber === 4 && 'Role'}
            </span>
          </div>
        ))}
      </div>
      <div className="relative mt-2">
        <div className="absolute top-0 left-0 h-0.5 bg-white/10 w-full"></div>
        <div 
          className="absolute top-0 left-0 h-0.5 bg-blue-500 transition-all duration-300" 
          style={{ width: `${(step - 1) * 33.33}%` }}
        ></div>
      </div>
    </div>
  );

  return (
    <div className="min-h-screen relative overflow-hidden bg-gradient-to-br from-gray-900 to-blue-900 flex items-center justify-center p-4 md:p-8">
      {/* Background elements (same as login) */}
      <div className="absolute inset-0 overflow-hidden">
        {particles.map((particle) => (
          <motion.div
            key={particle.id}
            className="absolute rounded-full bg-blue-400 opacity-20"
            style={{
              width: `${particle.size}px`,
              height: `${particle.size}px`,
              left: `${particle.x}%`,
              top: `${particle.y}%`,
            }}
          />
        ))}
      </div>

      {/* Registration Card */}
      <motion.div 
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="w-full max-w-2xl relative z-10"
      >
        <motion.div
          className="bg-white/10 backdrop-blur-lg rounded-2xl shadow-2xl overflow-hidden border border-white/20"
          whileHover={{ scale: 1.01 }}
          transition={{ type: 'spring', stiffness: 400, damping: 10 }}
        >
          <div className="p-6 sm:p-8">
            {/* Logo/Header */}
            <div className="flex justify-center mb-4">
              <div className="w-16 h-16 bg-gradient-to-r from-blue-400 to-blue-600 rounded-full flex items-center justify-center shadow-lg">
                <PiShieldCheck className="w-8 h-8 text-white" />
              </div>
            </div>

            {/* Title */}
            <div className="text-center mb-6">
              <h1 className="text-2xl sm:text-3xl font-bold text-white mb-2">
                Enterprise ERP Registration
              </h1>
              <p className="text-blue-100">
                Complete your registration in {5 - step} simple steps
              </p>
            </div>

            {/* Step Progress */}
            <StepProgress />

            {/* Success Message */}
            <AnimatePresence>
              {registrationSuccess && (
                <motion.div
                  initial={{ opacity: 0, height: 0 }}
                  animate={{ opacity: 1, height: 'auto' }}
                  exit={{ opacity: 0, height: 0 }}
                  className="mb-4 p-3 bg-green-400/20 text-green-100 text-sm rounded-lg flex items-center backdrop-blur-sm"
                >
                  <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7"></path>
                  </svg>
                  Registration successful! Redirecting to onboarding...
                </motion.div>
              )}
            </AnimatePresence>

            {/* Form Content */}
            <form onSubmit={handleSubmit}>
              <AnimatePresence mode="wait">
                <motion.div
                  key={step}
                  initial={{ opacity: 0, x: step > 1 ? 50 : -50 }}
                  animate={{ opacity: 1, x: 0 }}
                  exit={{ opacity: 0, x: step > 1 ? -50 : 50 }}
                  transition={{ duration: 0.3 }}
                >
                  {step === 1 && <Step1Account />}
                  {step === 2 && <Step2Personal />}
                  {step === 3 && <Step3Organization />}
                  {step === 4 && <Step4Role />}
                </motion.div>
              </AnimatePresence>

              {/* Navigation Buttons */}
              <div className="mt-6 flex justify-between">
                {step > 1 ? (
                  <button
                    type="button"
                    onClick={prevStep}
                    className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-lg text-blue-100 bg-white/10 hover:bg-white/20 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition"
                  >
                    <PiArrowLeft className="mr-2 h-4 w-4" />
                    Back
                  </button>
                ) : (
                  <div></div> // Empty div to maintain space
                )}

                {step < 4 ? (
                  <button
                    type="button"
                    onClick={nextStep}
                    className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-lg shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition"
                  >
                    Continue
                    <PiArrowRight className="ml-2 h-4 w-4" />
                  </button>
                ) : (
                  <motion.button
                    type="submit"
                    disabled={isSubmitting}
                    className={`inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-lg shadow-sm text-white ${
                      isSubmitting 
                        ? 'bg-blue-400' 
                        : 'bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700'
                    } focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition relative overflow-hidden`}
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                  >
                    {isSubmitting && (
                      <motion.div
                        className="absolute inset-0 bg-blue-400/30 backdrop-blur-sm"
                        initial={{ width: 0 }}
                        animate={{ width: '100%' }}
                        transition={{ duration: 2 }}
                      />
                    )}
                    <span className="relative z-10 flex items-center">
                      {isSubmitting ? (
                        <>
                          <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                          </svg>
                          Processing...
                        </>
                      ) : (
                        <>
                          Complete Registration
                          <PiArrowRight className="ml-2 h-4 w-4" />
                        </>
                      )}
                    </span>
                  </motion.button>
                )}
              </div>
            </form>

            {/* Footer Links */}
            <div className="mt-6 text-center text-sm text-blue-200">
              <p>
                Already have an account?{' '}
                <Link to="/login" className="font-medium text-blue-300 hover:text-blue-100">
                  Sign in
                </Link>
              </p>
            </div>
          </div>
        </motion.div>
      </motion.div>
    </div>
  );
}